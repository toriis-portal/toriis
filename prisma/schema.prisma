generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions", "orderByNulls"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Sector {
  FINANCIAL_SERVICES
  INDUSTRIALS
  TECHNOLOGY
  UTILITIES
  HEALTHCARE
  CONSUMER_CYCLICAL
  COMMUNICATION_SERVICES
  ENERGY
  CONSUMER_DEFENSIVE
  REAL_ESTATE
  BASIC_MATERIALS
}

enum EnvGrade {
  AAA
  AA
  A
  BBB
  BB
  B
  CCC
}

enum Collection {
  Investment
  Company
  Fuel
  Emission
  Energy
}

model Investment {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  company      Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId    String   @db.ObjectId
  rawName      String
  coupon       Float
  maturityDate DateTime
  quantity     Float
  costVal      Float
  marketVal    Float
  year         Int
}

model Company {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  ticker           String?
  sector           Sector?
  industry         String?
  netAssetVal      Float
  investment       Investment[]
  description      String?
  ESG              ESG[]
  ESGInvalidTicker ESGInvalidTicker[]
  bloombergId      String?
  fuel             Fuel?
  energy           Energy?
  emission         Emission?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map(name: "refresh_token")
  access_token      String? @map(name: "access_token")
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map(name: "session_token")
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  createdAt       DateTime         @default(now())
  WhitelistedUser WhitelistedUser?
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ESG {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  company          Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId        String   @db.ObjectId
  environmentScore Int
  environmentGrade EnvGrade
  environmentLevel String
}

model ESGIndex {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  companyId String @db.ObjectId
}

model ESGInvalidTicker {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String  @db.ObjectId
}

model Fuel {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  company            Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId          String  @unique @db.ObjectId
  year               Int
  totalConsumption   Float?
  biodiesels         Float?
  biogases           Float?
  crudeOil           Float?
  coal               Float?
  oil                Float?
  gas                Float?
  otherBiomass       Float?
  sustainableBiomass Float?
  otherRenewable     Float?
  otherNonRenewable  Float?
}

model Energy {
  id                           String  @id @default(auto()) @map("_id") @db.ObjectId
  company                      Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId                    String  @unique @db.ObjectId
  year                         Int?
  totalConsumption             Float?
  totalRenewableConsumption    Float?
  totalNonRenewableConsumption Float?
}

model Emission {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  company    Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId  String    @unique @db.ObjectId
  date       DateTime?
  version    Int?
  scopeOne   Float?
  scopeTwo   Float?
  scopeThree Float?
}

model Staged {
  id      String     @id @default(auto()) @map("_id") @db.ObjectId
  type    Collection
  updates Json[]
}

model WhitelistedUser {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  email  String  @unique
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @unique @db.ObjectId
}
